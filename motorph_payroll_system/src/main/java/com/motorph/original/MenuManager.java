package com.motorph.original;
import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
 import java.util.Scanner;
public class MenuManager {
    private Scanner scanner; private EmployeeManager employeeManager; private PayrollManager payrollManager; private ReportManager reportManager;
    private static final DateTimeFormatter DF = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    public MenuManager(EmployeeManager em, PayrollManager pm, ReportManager rm) { scanner = new Scanner(System.in); employeeManager = em; payrollManager = pm; reportManager = rm; }
    public void start() { boolean running = true; while (running) { System.out.println("1. Employees\n2. Payroll\n3. Reports\n4. Exit"); int c = getInt("Choice: "); switch (c) { case 1: empMenu(); break; case 2: payrollMenu(); break; case 3: reportMenu(); break; case 4: running = false; break; default: System.out.println("Invalid"); } } scanner.close(); }
    private void empMenu() { boolean sub = true; while (sub) { System.out.println("1. All\n2. By ID\n3. By Name\n4. Attendance\n5. Back"); int c = getInt(": "); switch (c) { case 1: System.out.println(employeeManager.displayEmployeeList()); break; case 2: System.out.println(employeeManager.displayEmployeeDetails(getInt("ID: "))); break; case 3: System.out.print("Name: "); String n = scanner.nextLine(); var r = employeeManager.searchEmployeesByName(n); if (r.isEmpty()) System.out.println("None"); else for (var e : r) System.out.println(e.getEmployeeId()+" "+e.getFirstName()+" "+e.getLastName()); break; case 4: int id = getInt("ID: "); if (employeeManager.findEmployeeById(id).isEmpty()) { System.out.println("Not found"); break; } LocalDate s = getDate("Start (MM/DD/YYYY): "); LocalDate e = getDate("End (MM/DD/YYYY): "); if (s.isAfter(e)) { System.out.println("Start > End"); break; } System.out.println(payrollManager.displayAttendanceRecords(id, s, e)); break; case 5: sub = false; break; default: System.out.println("Invalid"); } } }
    private void payrollMenu() { boolean sub = true; while (sub) { System.out.println("1. Custom\n2. Weekly\n3. Monthly\n4. Back"); int c = getInt(": "); switch (c) { case 1: int id = getInt("ID: "); if (employeeManager.findEmployeeById(id).isEmpty()) { System.out.println("Not found"); break; } LocalDate s = getDate("Start: "); LocalDate e = getDate("End: "); if (s.isAfter(e)) { System.out.println("Start > End"); break; } System.out.println(reportManager.generatePayslip(id, s, e)); break; case 2: LocalDate ws = getDate("Week Start: "); LocalDate we = ws.plusDays(6); System.out.println(reportManager.generateWeeklySummaryReport(ws, we)); break; case 3: int m = getInt("Month: "); int y = getInt("Year: "); if (m < 1 || m > 12) { System.out.println("Invalid month"); break; } LocalDate ms = LocalDate.of(y, m, 1); LocalDate me = ms.plusMonths(1).minusDays(1); System.out.println(reportManager.generateMonthlySummaryReport(ms, me)); break; case 4: sub = false; break; default: System.out.println("Invalid"); } } }
    private void reportMenu() { boolean sub = true; while (sub) { System.out.println("1. Payslip\n2. Weekly\n3. Monthly\n4. Back"); int c = getInt(": "); switch (c) { case 1: int id = getInt("ID: "); if (employeeManager.findEmployeeById(id).isEmpty()) { System.out.println("Not found"); break; } LocalDate s = getDate("Start: "); LocalDate e = getDate("End: "); if (s.isAfter(e)) { System.out.println("Start > End"); break; } System.out.println(reportManager.generatePayslip(id, s, e)); break; case 2: LocalDate ws = getDate("Week Start: "); LocalDate we = ws.plusDays(6); System.out.println(reportManager.generateWeeklySummaryReport(ws, we)); break; case 3: int m = getInt("Month: "); int y = getInt("Year: "); if (m < 1 || m > 12) { System.out.println("Invalid month"); break; } LocalDate ms = LocalDate.of(y, m, 1); LocalDate me = ms.plusMonths(1).minusDays(1); System.out.println(reportManager.generateMonthlySummaryReport(ms, me)); break; case 4: sub = false; break; default: System.out.println("Invalid"); } } }
    private int getInt(String p) { while (true) { System.out.print(p); try { return Integer.parseInt(scanner.nextLine()); } catch (Exception e) { System.out.println("Number only"); } } }
    private LocalDate getDate(String p) { while (true) { System.out.print(p); try { return LocalDate.parse(scanner.nextLine(), DF); } catch (Exception e) { System.out.println("MM/DD/YYYY"); } } }
}